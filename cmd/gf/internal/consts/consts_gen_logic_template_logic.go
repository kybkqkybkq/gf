// Copyright GoFrame gf Author(https://goframe.org). All Rights Reserved.
//
// This Source Code Form is subject to the terms of the MIT License.
// If a copy of the MIT was not distributed with this file,
// You can obtain one at https://github.com/gogf/gf.

package consts

const TemplateGenLogicIndexContent = `
// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package {TplPackageName}

import (
	"{TplImportPrefix}/internal"
)

// internal{TplTableNameCamelCase}Logic is internal type for wrapping internal DAO implements.
type internal{TplTableNameCamelCase}Logic = *internal.s{TplTableNameCamelCase}

// {TplTableNameCamelLowerCase}Logic is the data access object for table {TplTableName}.
// You can define custom methods on it to extend its functionality as you wish.
type {TplTableNameCamelLowerCase}Logic struct {
	internal{TplTableNameCamelCase}Logic
}

var (
	// {TplTableNameCamelCase} is globally public accessible object for table {TplTableName} operations.
	{TplTableNameCamelCase} = {TplTableNameCamelLowerCase}Logic{
		internal.News{TplTableNameCamelCase}(),
	}
)

// Fill with you ideas below.

`

// const TemplateGenLogicInternalContent = `
// // ==========================================================================
// // Code generated and maintained by GoFrame CLI tool. DO NOT EDIT. {TplCreatedAtDatetimeStr}
// // ==========================================================================

// package internal

// import (
// 	"context"

// 	"github.com/gogf/gf/v2/database/gdb"
// 	"github.com/gogf/gf/v2/frame/g"
// )

// // {TplTableNameCamelCase}Logic is the data access object for table {TplTableName}.
// type {TplTableNameCamelCase}Logic struct {
// 	table   string          // table is the underlying table name of the DAO.
// 	group   string          // group is the database configuration group name of current DAO.
// 	columns {TplTableNameCamelCase}Columns // columns contains all the column names of Table for convenient usage.
// }

// // {TplTableNameCamelCase}Columns defines and stores column names for table {TplTableName}.
// type {TplTableNameCamelCase}Columns struct {
// 	{TplColumnDefine}
// }

// // {TplTableNameCamelLowerCase}Columns holds the columns for table {TplTableName}.
// var {TplTableNameCamelLowerCase}Columns = {TplTableNameCamelCase}Columns{
// 	{TplColumnNames}
// }

// // New{TplTableNameCamelCase}Logic creates and returns a new DAO object for table data access.
// func New{TplTableNameCamelCase}Logic() *{TplTableNameCamelCase}Logic {
// 	return &{TplTableNameCamelCase}Logic{
// 		group:   "{TplGroupName}",
// 		table:   "{TplTableName}",
// 		columns: {TplTableNameCamelLowerCase}Columns,
// 	}
// }

// // DB retrieves and returns the underlying raw database management object of current DAO.
// func (logic *{TplTableNameCamelCase}Logic) DB() gdb.DB {
// 	return g.DB(logic.group)
// }

// // Table returns the table name of current logic.
// func (logic *{TplTableNameCamelCase}Logic) Table() string {
// 	return logic.table
// }

// // Columns returns all column names of current logic.
// func (logic *{TplTableNameCamelCase}Logic) Columns() {TplTableNameCamelCase}Columns {
// 	return logic.columns
// }

// // Group returns the configuration group name of database of current logic.
// func (logic *{TplTableNameCamelCase}Logic) Group() string {
// 	return logic.group
// }

// // Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
// func (logic *{TplTableNameCamelCase}Logic) Ctx(ctx context.Context) *gdb.Model {
// 	return logic.DB().Model(logic.table).Safe().Ctx(ctx)
// }

// // Transaction wraps the transaction logic using function f.
// // It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// // It commits the transaction and returns nil if function f returns nil.
// //
// // Note that, you should not Commit or Rollback the transaction in function f
// // as it is automatically handled by this function.
// func (logic *{TplTableNameCamelCase}Logic) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
// 	return logic.Ctx(ctx).Transaction(ctx, f)
// }
// `

// var dir = filepath.Base(TplImportPrefix)

const TemplateGenLogicInternalContent = `package {TplTableName}

import (
	"context"
	"{TplBasePath}/internal/dao"
	"{TplBasePath}/internal/model/entity"
	"log"
)

func init() {
	service.Register{TplTableNameCamelCase}(News{TplTableNameCamelCase}())
}

func News{TplTableNameCamelCase}() *s{TplTableNameCamelCase} {
	return &s{TplTableNameCamelCase}{}
}

type s{TplTableNameCamelCase} struct {
}

func (*s{TplTableNameCamelCase}) Create{TplTableNameCamelCase}(ctx context.Context, in entity.{TplTableNameCamelCase}) error {
	_, err := dao.{TplTableNameCamelCase}.Ctx(ctx).Insert(in)
	return err
}

func (*s{TplTableNameCamelCase}) Delete{TplTableNameCamelCase}(ctx context.Context, id int) error {
	_, err := dao.{TplTableNameCamelCase}.Ctx(ctx).Where("id", id).Delete()
	return err
}

func (*s{TplTableNameCamelCase}) List{TplTableNameCamelCase}(ctx context.Context) ([]entity.{TplTableNameCamelCase}, error) {
	{TplTableName}s := []entity.{TplTableNameCamelCase}{}
	err := dao.{TplTableNameCamelCase}.Ctx(ctx).Scan(&{TplTableName}s)
	return {TplTableName}s, err
}

func (*s{TplTableNameCamelCase}) Update{TplTableNameCamelCase}(ctx context.Context, id int) error {
	_, err := dao.{TplTableNameCamelCase}.Ctx(ctx).Where("id", id).Update()
	return err
}
`
